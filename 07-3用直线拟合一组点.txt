//在黑色图像上绘制白线，并将它与Canny图像相交
int n=0; //选择line 0
//黑色图像
cv::Mat oneline(contours.size(),CV_8U,cv::Scalar(0));
//白色直线
cv::line(oneline,cv::Point(lines[n][0],lines[n][1]),
           cv::Point(lines[n][2],lines[n][3]),
           cv::Scalar(255),
            5); //直线宽度

//轮廓与白线进行AND操作
cv::bitwise_and(contours,oneline,oneline);



//-----------------------
//这个集合中的点的坐标可以在下述双重循环中置入cv::Points类型的std::vector中
std::vector<cv::Point>points;
//遍历像素得到所有点的位置
for(int y=0;y<oneline.rows;y++){
        //y行
        uchar*rowPtr=oneline.ptr<uchar>(y);
        for(int x=0;x<oneline.cols;x++){
             //x列
             //如果位于轮廓上
              if(rowPtr[x]){
                 points.push_back(cv::Point(x,y));
             }
           }
      }

//简单地调用cv::fitLine函数便可以找到最合适的线
cv::Vec4f line;  //Vec4f前两项：单位方向向量；后两项：直线上一点坐标
cv::fitLine(cv::Mat(points),line,
                 CV_DIST_L2,  //距离类型
                  0, //L2距离不使用该参数
                  0.01,0.01 //精确值
              )；


//绘制估计的直线
int x0=line[2]; //直线上的点
int y0=line[3]; 
int x1=x0-200*line[0]; //使用单位向量
int y1=y0-200*line[1]; //添加长度为200的向量
image=cv::imread("..",0);
cv::line(image,cv::Point(x0,y0),cv::Point(x1,y1),cv::Scalar(0),3);






//----------------
//函数cv::fitEllipse使用一组二维点拟合一个椭圆，它返回一个带旋转的矩形，它内切了一个椭圆
cv::RotatedRect rrect=cv::fitEllipse(cv::Mat(points));
cv::ellipse(image,rrect,cv::Scalar(0));//绘制得到的椭圆

