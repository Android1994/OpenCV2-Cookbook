//opencv提供两种霍夫变换的实现
//基础版本是cv::HoughLines，输入为一幅包含一组点（表示为非零元素）的二值图像，通常这是一幅边缘图像，比如来自canny算子
//cv::HoughLines函数的输出是cv::Vec2f向量，每个元素都是一对代表检测到的直线的浮点数(p,θ)。

//应用canny算法
cv::Mat contours;
cv::Canny(image,contours,125,350);
//Hough变换检测直线
std::vector<cv::Vec2f>lines;
cv::HoughLines(
               test,
               lines,
                1, //步进尺寸
               PI/180, //步进尺寸
                80 //最小投票数
);

//通过遍历向量，我们绘制每条线
std::vector<cv::Vec2f>::const_iterator it=lines.begin();
while(it!=lines.end()){
      float rho=(*it)[0]; //第一个参数为距离rho
      float theta=(*it)[1];//第二个参数为角度theta
      if(theta<PI/4.||theta>3.*PI/4.){ //~垂直线
         //线与第一行相交
            cv::Point pt1(rho/cos(theta),0);
         //线与最后一行相交
            cv::Point pt2((rho-result.rows*sin(theta))/cos(theta),result.rows);
         //绘制白线
            cv::line(image,pt1,pt2,cv::Scalar(255),1);
      }else{ //~水平线
         //线与第一列的交点
            cv::Point pt1(0,rho/sin(theta));
         //线与最后一列的交点
            cv::Point pt2(result.cols,(rho-result.cols*cos(theta))/sin(theta));
        //绘制白线
            cv::line(image,pt1,pt2,cv::Scalar(255),1);
      }
      ++it;
}


//------------------------
//-----------------------------------------------

//霍夫变换仅仅查找边缘点的一种排列方式，由于意外的像素排列或是多条线穿过同一组像素，很有可能带来错误检测
//为了克服这些难题，同时检测到带端点的线段，人们提出了改进后的算法，即概率霍夫变换，对应的函数为cv::HoughLinesP，我们将它封装在LineFinder类中
class LineFinder{
        private:
          //原图
         cv::Mat img;
          //向量中包含检测到的直线的端点
         std::vector<cv::Vec4i>lines;
         //累加器的分辨率
        double deltaRho;
        double deltaTheta;
         //直线被接受时所需的最小投票数
        int minVote;
         //直线的最小长度
        double minLength;
         //沿着直线方向的最大缺口
        double maxGap;
       
         public:
        //默认的累加器的分辨率为单个像素及1°
        //不设置缺口及最小长度的值
          LineFinder():deltaRho(1),deltaTheta(PI/180),minVote(10),minLength(0.),maxGap(0.){}


       //设置累加器的分辨率
      void setAccResolution(double dRho,double dTheta){
           deltaRho=dRho;
           deltaTheta=dTheta;
       }

      //设置最小投票数
     void setMinVote(int minv){
        minVote=minv;
     }

     //设置缺口及最小长度
      void setLineLengthAndGap(double length,double gap){
      minLength=length;
      maxGap=gap;
}

      //使用概率霍夫变换
      std::vector<cv::Vec4i>findLines(cv::Mat& binary){
             lines.clear();
             cv::HoughLinesP(binary,lines,deltaRho,deltaTheta,minVote,minLength,maxGap);
              return lines;
        }

     //绘制检测到的直线
       void drawDetectedLines(cv::Mat &image,cv::Scalar color=cv::Scalar(255,255,255)){
           //画线
           std::vector<cv::Vec4i>::const_iteratior it2=lines.begin();

            while(it2!=lines.end()){
                 cv::Point pt1((*it2)[0],(*it2)[1]);
                 cv::Point pt2((*it2)[2],(*it2)[3]);
                 cv::line(image,pt1,pt2,color);
                  ++it2;
             }
       }

......
}


//使用
//创建LineFinder实例
LineFinder finder;
//设置概率Hough参数
finder.setLineLengthAndGap(100,20);
finder.setMinVote(80);
//检测并绘制直线
std::vector<cv::Vec4i>lines=finder.findLines(contours);
finder.drawDetectedLines(image);
cv::namedWindow("...");
cv::imshow("...",image);


//------------------
/-------------------------------
//霍夫变换的目的是找到二值图像中经过足够多数量的点的所有直线，分析每个像素点，当同一条直线穿过许多点便意味这这条线的存在足够明显
//霍夫变换使用二维累加器以统计特定的直线被识别了多少次，累加器的尺寸由指定的(p,θ)参数的步进尺寸定义

//原理......


//-------------------
//------------------------------

//1、检测圆
//需要三个参数（半径，圆心坐标），要三维累加器
//原理。。。。。

cv::GuassianBlur(image,image,cv::Size(5,5),1.5);
std::vector<cv::Vec3f>circles;
cv::HoughCircles(
            image,
            circles,
            CV_HOUGH_GRADIENT,
            2, //累加器的分辨率(图像的尺寸/2)
           50, //两个圆之间的最小距离
           200， //Canny高阈值
          100, //最小投票数
          25，100 //极小极大半径
);

//建议先对图像进行平滑
//检测结果以cv::Vec3f向量的形式给出，头两个参数是圆心坐标，第三个是半径
//绘制
std::vector<cv::Vec3f>::const_iterator itc=circles.begin();
while(itc!=circles.end()){
         cv::circle(
          image,
          cv::Point((*itc)[0],(*itc)[1]), //圆心
          (*itc)[2], //半径
          cv::Scalar(255), //颜色
           2 //厚度
            );
++itc;
    }


//-------------
//2、广义霍夫变换
//。。。。。。。。。。。。
//。。。。。。。。。。。。