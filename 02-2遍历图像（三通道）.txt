void colorReduce(cv::Mat &image,int div=64)//颜色缩减
{
int n1=image.rows; //行数
int nc=image.cols*image.channels();//每行元素个数
for(int j=0;j<n1;j++)
{
uchar* data= image.ptr<uchar>(j); //得到第j行首地址
for(int i=0;i<nc;i++)
{
data[i]=data[i]/div*div+div/2;//处理每一个像素
}
}
}




//高效遍历连续图像
void colorReduce (cv::Mat &image,int div=64)
{
int n1=image.rows;
int nc=image.cols*image.channels();
if(image.isContinuous())
{
//没有额外填补像素
cout<<"是连续图像";
nc=nc*n1;
n1=1;
}

//对于连续图像，本循环只执行一次
for(int j=0;j<n1;j++)
{
uchar* data=image.ptr<uchar>(j);
    for(int i=0;i<nc;i++)
        data[i]=data[i]/div*div+div/2;
}
}



step//行宽，单位：1字节







//使用迭代器遍历图像
//迭代器声明：cv::Mat Iterator_<cv::Vec3b> it; 或 cv::Mat_<cv::Vec3b>::iterator it;

void colorReduce(cv::Mat &image,int div=64)
{
cv::Mat_<cv::Vec3b>::iterator it=image.begin<cv::Vec3b>();
cv::Mat_<cv::Vec3b>::iterator itend=image.end<cv::Vec3b>();

for(;it!=itend;it++)
{
(*it)[0]=(*it)[0]/div*div+div/2;
(*it)[1]=(*it)[1]/div*div+div/2;
(*it)[2]=(*it)[2]/div*div+div/2;
}
}